<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ruoyi.catering.mapper.RegionMapper">

    <resultMap type="Region" id="RegionResult">
        <result property="regionId" column="region_id"/>
        <result property="parentId" column="parent_id"/>
        <result property="ancestors" column="ancestors"/>
        <result property="regionName" column="region_name"/>
        <result property="orderNum" column="order_num"/>
        <result property="status" column="status"/>
        <result property="delFlag" column="del_flag"/>
        <result property="parentName" column="parent_name"/>
        <result property="createBy" column="create_by"/>
        <result property="createTime" column="create_time"/>
        <result property="updateBy" column="update_by"/>
        <result property="updateTime" column="update_time"/>
        <result property="remark" column="remark"/>
    </resultMap>

    <sql id="selectRegionVo">
        select r.region_id, r.parent_id, r.ancestors, r.region_name, r.order_num, r.status, r.del_flag, r.create_by,
        r.create_time
        from cy_region r
    </sql>

    <!--<select id="selectRoleRegionTree" parameterType="Long" resultType="String">-->
    <!--select concat(r.region_id, r.region_name) as region_name-->
    <!--from cy_region r-->
    <!--left join sys_role_region rd on r.region_id = rr.region_id-->
    <!--where r.del_flag = '0' and rr.role_id = #{roleId}-->
    <!--order by r.parent_id, r.order_num-->
    <!--</select>-->

    <select id="selectRegionList" parameterType="Region" resultMap="RegionResult">
        <include refid="selectRegionVo"/>
        where r.del_flag = '0'
        <if test="parentId != null and parentId != 0">
            AND parent_id = #{parentId}
        </if>
        <if test="regionName != null and regionName != ''">
            AND region_name like concat('%', #{regionName}, '%')
        </if>
        <if test="status != null and status != ''">
            AND status = #{status}
        </if>
        <!-- 数据范围过滤 -->
        ${params.dataScope}
        order by r.parent_id, r.order_num
    </select>

    <select id="checkRegionExistRestaurant" parameterType="Long" resultType="int">
        select count(1) from cy_restaurant where region_id = #{regionId}
    </select>

    <select id="selectRegionCount" parameterType="Region" resultType="int">
        select count(1) from cy_region
        where del_flag = '0'
        <if test="regionId != null and regionId != 0">and region_id = #{regionId}</if>
        <if test="parentId != null and parentId != 0">and parent_id = #{parentId}</if>
    </select>

    <select id="checkRegionNameUnique" resultMap="RegionResult">
        <include refid="selectRegionVo"/>
        where region_name=#{regionName} and parent_id = #{parentId}
    </select>

    <select id="selectRegionById" parameterType="Long" resultMap="RegionResult">
        select r.region_id, r.parent_id, r.ancestors, r.region_name, r.order_num, r.status,
        (select region_name from cy_region where region_id = r.parent_id) parent_name
        from cy_region r
        where r.region_id = #{regionId}
    </select>

    <select id="selectChildrenRegionById" parameterType="Long" resultMap="RegionResult">
        select * from cy_region where find_in_set(#{regionId}, ancestors)
    </select>

    <select id="selectNormalChildrenRegionById" parameterType="Long" resultType="int">
        select count(*) from cy_region where status = 0 and del_flag = '0' and find_in_set(#{regionId}, ancestors)
    </select>

    <insert id="insertRegion" parameterType="Region">
        insert into cy_region(
        <if test="regionId != null and regionId != 0">region_id,</if>
        <if test="parentId != null and parentId != 0">parent_id,</if>
        <if test="regionName != null and regionName != ''">region_name,</if>
        <if test="ancestors != null and ancestors != ''">ancestors,</if>
        <if test="orderNum != null and orderNum != ''">order_num,</if>
        <if test="status != null">status,</if>
        <if test="createBy != null and createBy != ''">create_by,</if>
        create_time
        )values(
        <if test="regionId != null and regionId != 0">#{regionId},</if>
        <if test="parentId != null and parentId != 0">#{parentId},</if>
        <if test="regionName != null and regionName != ''">#{regionName},</if>
        <if test="ancestors != null and ancestors != ''">#{ancestors},</if>
        <if test="orderNum != null and orderNum != ''">#{orderNum},</if>
        <if test="status != null">#{status},</if>
        <if test="createBy != null and createBy != ''">#{createBy},</if>
        sysdate()
        )
    </insert>

    <update id="updateRegion" parameterType="Region">
        update cy_region
        <set>
            <if test="parentId != null and parentId != 0">parent_id = #{parentId},</if>
            <if test="regionName != null and regionName != ''">region_name = #{regionName},</if>
            <if test="ancestors != null and ancestors != ''">ancestors = #{ancestors},</if>
            <if test="orderNum != null and orderNum != ''">order_num = #{orderNum},</if>
            <if test="status != null and status != ''">status = #{status},</if>
            <if test="updateBy != null and updateBy != ''">update_by = #{updateBy},</if>
            update_time = sysdate()
        </set>
        where region_id = #{regionId}
    </update>

    <update id="updateRegionChildren" parameterType="java.util.List">
        update cy_region set ancestors =
        <foreach collection="regions" item="item" index="index"
                 separator=" " open="case region_id" close="end">
            when #{item.regionId} then #{item.ancestors}
        </foreach>
        where region_id in
        <foreach collection="regions" item="item" index="index"
                 separator="," open="(" close=")">
            #{item.regionId}
        </foreach>
    </update>

    <delete id="deleteRegionById" parameterType="Long">
        update cy_region set del_flag = '2' where region_id = #{regionId}
    </delete>

    <update id="updateRegionStatus" parameterType="Region">
        update cy_region
        <set>
            <if test="status != null and status != ''">status = #{status},</if>
            <if test="updateBy != null and updateBy != ''">update_by = #{updateBy},</if>
            update_time = sysdate()
        </set>
        where region_id in (${ancestors})
    </update>


</mapper>